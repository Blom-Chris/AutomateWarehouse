@page "/allCustomers"
@using AutomateWarehouse.Data
@inject CustomerRepository customerRepo

<h3>All customers</h3>

<div class="container">

  <table class="table table-bordered">
    <thead class="thead-dark">
      <tr>
        <th>Name</th>
        <th>Phone</th>
        <th>Email</th>
        <th>Delete Customer</th>
        <th>Edit Customer</th>
      </tr>
    </thead>
    <tbody>
      @if (customers.Any())
      {
        @foreach (var cust in customers)
        {
          <tr>
            <td>@cust.Name</td>
            <td>@cust.Phone</td>
            <td>@cust.Email</td>
            <td><button class="btn btn-danger" @onclick="(() => DeleteCustomer(cust))">Delete</button></td>
            <td><button class="btn btn-info" @onclick="(() => SetCustomerForEdit ( cust ))">Edit</button></td>
          </tr>
        }
      }
    </tbody>
  </table>

  <div class="row m-5">
    <div class="col-5 bg-light m-2 justify-content-start">
      <div class="p-3 mb-3 bg-primary text-white text-center">
        Add new Customer
      </div>
      <EditForm Model="@NewCustomer" OnValidSubmit="@AddNewCustomer">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
          @*Binder respektive värde nedanför till objektet NewEmployee*@
          <label for="name">Name</label>
          <input type="type" id="name" class="form-control" @bind-value="@NewCustomer.Name" />
        </div>
        <div class="form-group">
          <label for="phone">Phone</label>
          <input type="type" id="name" class="form-control" @bind-value="@NewCustomer.Phone" />
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input type="type" id="name" class="form-control" @bind-value="@NewCustomer.Email" />
        </div>

        <div class="text-center p-3 mb-3">
          <button class="btn btn-info" type="submit">Add Customer</button>
        </div>
      </EditForm>
    </div>
  </div>

  <div class="row m-5">
    <div class="col-5 bg-light m-2 justify-content-start">
      <div class="p-3 mb-3 bg-primary text-white text-center">
        Edit Customer
      </div>
      <EditForm Model="@UpdateCustomer" OnValidSubmit="(() => EditCustomer())">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
          @*Binder respektive värde nedanför till objektet NewEmployee*@
          <label for="name">Name</label>
          <input type="type" id="name" class="form-control" @bind-value="@UpdateCustomer.Name" />
        </div>
        <div class="form-group">
          <label for="phone">Phone</label>
          <input type="type" id="name" class="form-control" @bind-value="@UpdateCustomer.Phone" />
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input type="type" id="name" class="form-control" @bind-value="@UpdateCustomer.Email" />
        </div>

        <div class="text-center p-3 mb-3">
          <button class="btn btn-info" type="submit">Edit Customer</button>
        </div>
      </EditForm>
    </div>
  </div>

  <table class="table table-bordered">
    <thead class="thead-dark">
      <tr>
        <th>OrderDate</th>
        <th>Phone</th>
        <th>Email</th>
        <th>Delete Customer</th>
        <th>Edit Customer</th>
      </tr>
    </thead>
    <tbody>
      @if (customers.Any())
      {
        @foreach (var cust in customers)
        {
          <tr>
            <td>@cust.Name</td>
            <td>@cust.Phone</td>
            <td>@cust.Email</td>
            <td><button class="btn btn-danger" @onclick="(() => DeleteCustomer(cust))">Delete</button></td>
            <td><button class="btn btn-info" @onclick="(() => SetCustomerForEdit ( cust ))">Edit</button></td>
          </tr>
        }
      }
    </tbody>
  </table>

</div> 

  @code {
    private List<Customer> customers;
    private List<Order> orders;
    Customer NewCustomer = new Customer();
    Customer UpdateCustomer = new Customer();

    protected override async Task OnInitializedAsync()
    {
      customers = await customerRepo.GetCustomerAsync();
    }

    //Add a new Cutomer by calling the repository. Create a new object wo erase the old.
    private async Task AddNewCustomer()
    {
      await customerRepo.AddCustomerAsync(NewCustomer);
      NewCustomer = new Customer();
      await UpdateGUI();
    }

    //Delete a customer by calling method in repository.
    private async Task DeleteCustomer(Customer customer)
    {
      await customerRepo.DeleteCustomerAsync(customer);
      await UpdateGUI();
    }

    private void SetCustomerForEdit(Customer selected)
    {
      UpdateCustomer = selected;
    }
    //Edit a customer by calling method in repository.
    private async Task EditCustomer()
    {
      await customerRepo.EditCustomerAsync(UpdateCustomer);
      await UpdateGUI();
    }

    //To update the GUI by fetching from database async.
    private async Task UpdateGUI()
    {
      customers = await customerRepo.GetCustomerAsync();
    }
  }
