@page "/Products"
@using AutomateWarehouse.Data
@inject ProductRepository productRepository

<h3>Products</h3>

<div class="container">
    <div>
        <select type="text" id="dept" class="form-control select-picker"
                @bind="@FilterFunction">
            <option value="">Pick a function... </option>
            <option value="1">Show all products </option>
            <option value="2">Add products </option>
            <option value="3">Remove products </option>
            <option value="4">Update product </option>
            <option value="5">Show out-of-stock products </option>
        </select>

        <button class="btn btn-info" type="button"
                @onclick="FilterGUI">
            OK
        </button>
    </div>
    <div>
        <EditForm Model="@newProduct" OnValidSubmit="(() => productRepository.AddProducts(newProduct))">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row m-5">
                <div class="col-5 bg-light m-2 justify-content-start">
                    <div class="p-3 mb-3 bg-primary text-white text-center">
                        <div class="form-group">
                            <label for=" name ">Product name </label>
                            <input @bind-value="@newProduct.Name" type="text" />
                        </div>
                        <div class="form-group ">
                            <label for="description">
                                Description
                            </label>
                            <input @bind-value="@newProduct.Description" type="text" />
                        </div>
                        <div class="form-group ">
                            <label for="price">
                                Price
                            </label>
                            <input @bind-value="@newProduct.Price" type="number" />
                        </div>
                        <div class="form-group ">
                            <label for="stock">
                                Stock
                            </label>
                            <input @bind-value="@newProduct.Stock" type="number" />
                        </div>
                        <button class="btn btn-info" type="submit">
                            Add Product
                        </button>
                    </div>
                </div>
            </div>
        </EditForm>

    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Stock</th>
                <th>Restocking date</th>
            </tr>
        </thead>
        <tbody>
            @if (Productss.Any())
            {
                @foreach (var prod in Productss)
                {
                    <tr>
                        <td>@prod.Id</td>
                        <td>@prod.Name</td>
                        <td>@prod.Description</td>
                        <td>@prod.Price</td>
                        <td>@prod.Stock</td>
                        <td>@prod.RestockingDate</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<Product> Productss;
    public string Filter { get; set; }
    public string FilterFunction { get; set; }
    Product newProduct = new Product();


    protected override async Task OnInitializedAsync()
    {
        Productss = await productRepository.GetAllProductsAsync();
    }
    private async void FilterGUI()
    {
        switch (FilterFunction)
        {
            case "1":

                Productss = await productRepository.GetAllProductsAsync();
                break;
            //case "2":

            //    Productss = await productRepository.AddProducts();
            //    break;
            //case "3":

            //    Productss = await productRepository.RemoveProducts();
            //    break;
            //case "4":

            //    Productss = await productRepository.UpdateProduct();
            //    break;

            case "5":

                Productss = await productRepository.EmptyStock();
                break;
        }
    }
}

