@page "/Products"
@using AutomateWarehouse.Data
@inject IProductRepository productRepository

<h3>Products</h3>

<div class="container">
    <div class="row m-2">

        <div class="col-5.5 bg-light m-2 justify-content-start">
            <div class="p-3 mb-3 bg-secondary text-white text-center">
                Add new Product
            </div>
            <EditForm Model="@newProduct" OnValidSubmit="@AddNewProduct">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="p-3 mb-3 bg-primary text-white text-center">
                    <div class="form-group">
                        <label for="name">Product name </label>
                        <input @bind-value="@newProduct.Name" type="text" />
                    </div>
                    <div class="form-group ">
                        <label for="description">
                            Description
                        </label>
                        <input @bind-value="@newProduct.Description" type="text" />
                    </div>
                    <div class="form-group ">
                        <label for="price">
                            Price
                        </label>
                        <input @bind-value="@newProduct.Price" type="number" />
                    </div>
                    <div class="form-group ">
                        <label for="stock">
                            Stock
                        </label>
                        <input @bind-value="@newProduct.Stock" type="number" />
                    </div>
                    <button class="btn btn-info" type="submit">
                        Add Product
                    </button>
                </div>
            </EditForm>
        </div>
        @if (editProduct)
        {
            <div class="col-5.5 bg-light m-2 justify-content-start">
                <EditForm Model="@updateProduct" OnValidSubmit="(() => EditProduct())">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="p-3 mb-3 bg-secondary text-white text-center">
                        Edit Product
                    </div>
                    <div class="p-3 mb-3 bg-secondary text-white text-center">
                        <div class="form-group ">
                            <label for="name">Product name </label>
                            <input @bind-value="@updateProduct.Name" type="text" />
                        </div>
                        <div class="form-group ">
                            <label for="description">
                                Description
                            </label>
                            <input id="name" @bind-value="@updateProduct.Description" type="text" />
                        </div>
                        <div class="form-group ">
                            <label for="price">
                                Price
                            </label>
                            <input id="name" @bind-value="@updateProduct.Price" type="number" />
                        </div>
                        <div class="form-group ">
                            <label for="stock">
                                Stock
                            </label>
                            <input id="name" @bind-value="@updateProduct.Stock" type="number" />
                        </div>
                        <button class="btn btn-info" type="submit">
                            Update Product
                        </button>
                    </div>
                </EditForm>
            </div>
        }
        @*<div><label visible="Mod(RoundDown(Timer1.Value/5000,0),2)=1" >Edit complete</label></div>*@
    </div>
    <div>
        <select type="text" id="dept" class="form-control select-picker"
                @bind="@FilterFunction">
            <option value="">Pick a function... </option>
            <option value="1">Show all Products </option>
            <option value="2">Out-of-stock Products </option>
        </select>
        <button class="btn btn-info" type="button"
                @onclick="FilterGUI">
            Filter
        </button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Stock</th>
                <th>Restocking date</th>
                <th>Edit Product</th>
                <th>Delete Product</th>
            </tr>
        </thead>
        <tbody>
            @if (ProductsList.Any())
            {
                @foreach (var prod in ProductsList)
                {
                    <tr>
                        <td>@prod.Id</td>
                        <td>@prod.Name</td>
                        <td>@prod.Description</td>
                        <td>@prod.Price</td>
                        <td>@prod.Stock</td>
                        @if (prod.RestockingDate == default)
                        {
                            <td>n/a</td>
                        }
                        else
                        {
                            <td>@prod.RestockingDate.ToShortDateString()</td>

                        }
                        <td><button class="btn btn-info" @onclick="(() => SetProductForUpdate( prod ))">Edit</button></td>
                        <td><button class="btn btn-danger" @onclick="(() => DeleteProduct(prod))">Delete</button></td>

                    </tr>
                }
            }
        </tbody>
    </table>

</div>

@code {
    private List<Product> ProductsList;
    public string FilterFunction { get; set; }
    Product newProduct = new Product();
    Product updateProduct = new Product();
    bool editProduct = false;

    /// <summary>
    /// Initially sets ProductsList by fetching data from the Product table in the DB.
    /// ProductsList is used for displaying which products that are available to order.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        ProductsList = await productRepository.GetAllProductsAsync();
    }

    /// <summary>
    /// Adds a new product to the DB
    /// Also clears the newProduct object from the added products attributes.
    /// </summary>
    /// <returns></returns>
    private async Task AddNewProduct()
    {
        //productRepository.SetRestockDate(newProduct);
        await productRepository.AddProductAsync(newProduct);

        newProduct = new Product();
        await UpdateGUI();
    }

    /// <summary>
    /// Delete a customer by calling method in repository
    /// </summary>
    /// <param name="p"></param>
    /// <returns></returns>
    private async Task DeleteProduct(Product p)
    {
        await productRepository.RemoveProductAsync(p);
        await UpdateGUI();
    }

    /// <summary>
    /// Updating the GUI by fetching from database async
    /// </summary>
    /// <returns></returns>
    private async Task UpdateGUI()
    {

        ProductsList = await productRepository.GetAllProductsAsync();
    }

    /// <summary>
    /// Sets the updateProduct object to the selected Product in the table,
    /// which is later used in EditProduct()
    /// </summary>
    /// <param name="selected"></param>
    private void SetProductForUpdate(Product selected)
    {
        editProduct = true;
        updateProduct = selected;
    }

    /// <summary>
    /// Edits the attributes of the selected product.
    /// Also clears the updateProduct object from the updated products attributes.
    /// </summary>
    /// <returns></returns>
    private async Task EditProduct()
    {
        await productRepository.EditProductsAsync(updateProduct);
        updateProduct = new Product();
        editProduct = false;
        await UpdateGUI();
    }

    /// <summary>
    /// Filtering method for the table that shows either all products in the DB
    /// or only the ones that are out of stock.
    /// </summary>
    private async void FilterGUI()
    {
        switch (FilterFunction)
        {
            case "1":

                ProductsList = await productRepository.GetAllProductsAsync();
                break;

            case "2":

                ProductsList = await productRepository.EmptyStock();
                break;
        }
    }
}

