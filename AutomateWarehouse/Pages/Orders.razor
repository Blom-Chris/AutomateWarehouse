@page "/allOrders"
@using AutomateWarehouse.Data
@inject IOrderRepository orderRepo
@inject IOrderLineRepository orderLineRepo
@inject IProductRepository productRepo
@inject ICustomerRepository customerRepo

<h3>Orders</h3>

<div class="container">

    <div class="row m-2">
        <div class="col-5 bg-light m-2 justify-content-start">
            <div class="p-3 mb-3 bg-secondary text-white text-center">
                Create new Order
            </div>
            <EditForm Model="@newOrder" OnValidSubmit="(() => AddNewOrder())">
                <DataAnnotationsValidator />  
                <ValidationSummary />
                <div class="form-group">
                    <label for="ord">Pick customer</label>
                    <select type="type" id="ord" class="form-control select-picker" @bind="@newOrder.CustomerId">
                        @foreach (var cust in customers)
                        {
                            <option value="@cust.Id">@cust.Name</option>
                        }
                    </select>
                    <br>
                    <label for="address">Delivery address</label>
                    <input type="type" id="address" class="form-control" @bind-value="@newOrder.DeliveryAddress" />
                    <br>
                    <button class="btn btn-success" type="submit">Add Order</button>
                </div>
            </EditForm>
        </div>

        @if (updateOrder.Id > 0)
        {
            <div class="col-5 bg-light m-2 justify-content-start">
                <div class="p-3 mb-3 bg-secondary text-white text-center">
                    Edit Order
                </div>
                <EditForm Model="@updateOrder" OnValidSubmit="(() => EditOrder())">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <p>Order Id: @updateOrder.Id</p>
                        <br>
                        <label for="deliveryAddress">Delivery address</label>
                        <input type="type" id="deliveryAddress" class="form-control" @bind-value="@updateOrder.DeliveryAddress" />
                    </div>
                    <div class="text-center p-3 m-3">
                        <button class="btn btn-success m-3" type="submit">Edit Order</button>

                        @if (updateOrder.PaymentCompleted)
                        {
                            <button class="btn btn-danger m-3" @onclick="(() => UndoPayment(updateOrder))">Undo payment</button>
                        }

                        @if (updateOrder.Dispatched)
                        {
                            <button class="btn btn-danger m-3" @onclick="(() => UndoDispatch(updateOrder))">Undo dispatch</button>
                        }
                    </div>
                </EditForm>
            </div>
        }


        @if (addProductToOrder.Id > 0)
        {
            <div class="col-5 bg-light m-2 justify-content-start">
                <div class="p-3 mb-3 bg-secondary text-white text-center">
                    Add products to order
                </div>
                <EditForm Model="@newOrderLine" OnValidSubmit="(() => AddNewOrderLine(addProductToOrder))">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <p>Order Id: @addProductToOrder.Id</p>
                        <select type="text" id="prod" class="form-control select-picker" @bind="@newOrderLine.ProductId">

                            <option value="">Choose a product</option>
                            @foreach (var product in products)
                            {
                                if (product.Stock > 0)
                                {
                                    <option value="@product.Id"> @product.Name </option>
                                }
                                else
                                {
                                    <option value="@product.Id"> @product.Name OUT OF STOCK </option>
                                }

                            }
                        </select>
                        <br>
                        <label for="addOrderLine">Choose quantity</label>
                        <input type="text" id="quantity" class="form-control" @bind-value="@newOrderLine.Quantity" />

                    </div>
                    <div class="text-center p-3 mb-3">
                        <button class="btn btn-info" type="submit">Add product</button>
                    </div>
                </EditForm>
            </div>
        }

    </div>

    <div align="center">
        <button class="btn btn-info m-1" @onclick="(() => GetAllOrdersAsync())">Show all orders</button>
        <button class="btn btn-info m-1" @onclick="(() => GetAllDispatchedOrdersAsync())">Show all dispatched orders</button>
        <button class="btn btn-info m-1" @onclick="(() => GetAllPendingdOrdersAsync())">Show all pending orders</button>
        <button class="btn btn-info m-1" @onclick="(() => DispatchAllOrders())">Process all orders</button>
    </div>
    
    <br/>
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Order id</th>
                <th>Customer id</th>
                <th>Order date</th>
                <th>Delivery address</th>
                <th>Payment completed</th>
                <th>Order dispatched</th>
                <th>Add product</th>
                <th>Order lines</th>
                <th>Edit order</th>
                <th>Pay order</th>
            </tr>
        </thead>
        <tbody>
            @if (orders.Any())
            {
                @foreach (var order in orders)
                {
            <tr>
                <td>@order.Id</td>
                <td>@order.CustomerId</td>
                <td>@order.OrderDate</td>
                <td>@order.DeliveryAddress</td>
                <td>
                    @if (order.PaymentCompleted == true)
                    {
                        <p>Paid</p>
                    }
                    else
                    {
                        <p>Not paid</p>
                    }
                </td>
                <td>
                    @if (order.Dispatched == true)
                    {
                        <p>Dispatched</p>
                    }
                    else
                    {
                        <p>Not dispatched</p>
                    }
                </td>
                <td>
                    @if (order.Dispatched == true)
                    {
                        <p>n/a</p>
                    }
                    else
                    {
                        <button class="btn btn-info" @onclick="(() => SetOrderForAddingProduct (order))">Add</button>
                    }
                </td>
                <td><button class="btn btn-info" @onclick="(() => ShowAllOrderLines(order))">Show</button></td>
                <td>
                    @if (order.Dispatched == true)
                    {
                        <p>n/a</p>
                    }
                    else
                    {
                        <button class="btn btn-info" @onclick="(() => SetOrderForEdit (order))">Edit</button>
                    }
                </td>

                <td>
                    @if (!order.PaymentCompleted)
                    {
                        <input type="button" name="PayButton" class="btn btn-success" id="PayButton" value="Pay" @onclick="(() => PayOrderAsync(order))" />
                    }
                    else
                    {
                        <input type="button" name="UndoPayButton" class="btn btn-danger" id="UndoPayButton" value="UndoPay" @onclick="(() => UndoPayment(order))" />
                    }
                </td>
            </tr>

                    <tr>
                        @if (orderLines != null)
                        {
                            @if (orderLines.Any() && currentOrder.Id == order.Id)
                            {

                                <td colspan="10">

                                    @foreach (var orderLine in orderLines)
                                    {

                                        <table class="table table-bordered margin-0 padding-0">

                                            @if (order.Id == orderLine.OrderId)
                                            {

                                                <thead class="thead-light margin-0 padding-0">
                                                    <tr>
                                                        <th>Order line Id</th>
                                                        <th>Product Id</th>
                                                        <th>Product name</th>
                                                        <th>Quantity</th>
                                                        <th>Order Id</th>
                                                        <th>Customer name</th>
                                                    </tr>
                                                </thead>

                                                <tbody class="margin-0 padding-0">
                                                    @foreach (var ol in orderLines)
                                                    {
                                                        <tr>
                                                            <td>@ol.Id</td>
                                                            <td>@ol.ProductId</td>
                                                            <td>@ol.Product.Name</td>
                                                            <td>@ol.Quantity</td>
                                                            <td>@ol.OrderId</td>
                                                            <td>@ol.Order.Customer.Name</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            }
                                        </table>

                                        break;
                                    }
                                </td>
                            }
                            else if (currentOrder.Id == order.Id)
                            {
                                <td colspan="10" align="center">
                                    <p>No order lines found</p>
                                </td>
                            }
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>


@code {
    private List<Order> orders;
    private List<OrderLine> orderLines = new List<OrderLine>();
    private List<Customer> customers;
    private List<Product> products;

    private Order currentOrder = new Order();
    private List<Product> ListOfProducts;
    private List<Customer> ListOfCustomers;
    private OrderLine newOrderLine = new OrderLine();

    Order newOrder = new Order();
    Order updateOrder = new Order();
    Order addProductToOrder = new Order();

    /// <summary>
    /// Initially sets all lists by fetching all data from Products, Customers and Orders tables from DB.
    /// orders list is used for displaying all current orders in the DB
    /// customers list is used for displaying which customers has placed the orders.
    /// products list is used for displaying all products when adding a new order line to an order.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        orders = await orderRepo.GetAllOrdersAsync();
        customers = await customerRepo.GetCustomerAsync();
        products = await productRepo.GetAllProductsAsync();
    }

    /// <summary>
    /// Adds a new order line to the selected order
    /// </summary>
    /// <param name="order"> The selected order </param>
    /// <returns></returns>
    private async Task AddNewOrderLine(Order order)
    {
        newOrderLine.OrderId = order.Id;
        await orderLineRepo.AddOrderLineAsync(newOrderLine);
        newOrderLine = new OrderLine();
        await UpdateGUI();
    }

    /// <summary>
    /// Adds a new order to the DB
    /// </summary>
    /// <returns></returns>
    private async Task AddNewOrder()
    {
        await orderRepo.AddNewOrderAsync(newOrder);
        newOrder = new Order();
        await UpdateGUI();
    }

    /// <summary>
    /// Edit the current selected order (updateOrder) 
    /// </summary>
    /// <returns></returns>
    private async Task EditOrder()
    {
        await orderRepo.EditOrderAsync(updateOrder);
        updateOrder = new Order();
    }

    /// <summary>
    /// Sets the updateOrder varaible which is used in other methods, EditOrder() for example
    /// </summary>
    /// <param name="selected"></param>
    private void SetOrderForEdit(Order selected)
    {
        updateOrder = selected;
    }

    /// <summary>
    /// Sets the addProductToOrder varaible which is the input parameter in AddNewOrderLine()
    /// </summary>
    /// <param name="selected"></param>
    private void SetOrderForAddingProduct(Order selected)
    {
        addProductToOrder = selected;
    }

    /// <summary>
    /// Sets the PaymentCompleted variable to true for the selected order
    /// </summary>
    /// <param name="order"> selected order </param>
    /// <returns></returns>
    private async Task PayOrderAsync(Order order)
    {
        await orderRepo.PayOrderAsync(order);
        await UpdateGUI();
    }

    /// <summary>
    /// Sets the PaymentCompleted varaible to false for the selected order
    /// </summary>
    /// <param name="order"> selected order </param>
    /// <returns></returns>
    private async Task UndoPayment(Order order)
    {
        await orderRepo.UndoPaymentAsync(order);
        await UpdateGUI();
    }

    /// <summary>
    /// Sets the Dispatched variable to false for the selected order
    /// </summary>
    /// <param name="order"> selected order </param>
    /// <returns></returns>
    private async Task UndoDispatch(Order order)
    {
        await orderRepo.UndoDispatchAsync(order);
        await UpdateGUI();
    }

    /// <summary>
    /// Sets the Dispatched variable to true for all orders
    /// </summary>
    /// <returns></returns>
    private async Task DispatchAllOrders()
    {
        await orderRepo.ProcessOrderAsync();
        await UpdateGUI();
    }

    /// <summary>
    /// Fetch all orders from the DB (For the table filter function)
    /// </summary>
    /// <returns></returns>
    private async Task GetAllOrdersAsync()
    {
        orders = await orderRepo.GetAllOrdersAsync();
    }

    /// <summary>
    /// Fetch all dispatched orders from the DB (For the table filter function)
    /// </summary>
    /// <returns></returns>
    private async Task GetAllDispatchedOrdersAsync()
    {
        orders = await orderRepo.GetAllDispatchedOrdersAsync();
    }

    /// <summary>
    /// Fetch all pending orders from the DB (For the table filter function)
    /// </summary>
    /// <returns></returns>
    private async Task GetAllPendingdOrdersAsync()
    {
        orders = await orderRepo.GetAllPendingOrdersAsync();
    }

    /// <summary>
    /// Updates the lists for all entities
    /// </summary>
    /// <returns></returns>
    protected async Task UpdateGUI()
    {
        orders = await orderRepo.GetAllOrdersAsync();
        customers = await customerRepo.GetCustomerAsync();
        products = await productRepo.GetAllProductsAsync();
        orderLines = await orderLineRepo.GetCurrentOrderLinesAsync(currentOrder);
    }

    /// <summary>
    /// Displays all order lines underneath the selected order in the table
    /// </summary>
    /// <param name="selectedOrder"> the selected order </param>
    /// <returns></returns>
    private async Task ShowAllOrderLines(Order selectedOrder)
    {
        currentOrder = selectedOrder;
        orderLines = await orderLineRepo.GetCurrentOrderLinesAsync(currentOrder);
        ListOfProducts = await productRepo.GetAllProductsAsync();
        ListOfCustomers = await customerRepo.GetCustomerAsync();
        await UpdateGUI();
    }
}
